{
    "collab_server" : "",
    "contents" : "# calc_model_selection.R\n# Formerly:  plot_hypothesis_test_results.r\n# Created by John Trochta\n# Date created:  11/06/2019\n# Summary:\n# This script calculates several model selection indices and summary outputs of \n# results to include in manuscript\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(R2admb)\nlibrary(loo)\n\nmod_sel <- function(what.to.calculate,run_ID,basePath,H_set,run_year,run_month){\n  source(file=paste0(here::here(\"src\"),\"/data_reader.R\"))\n  source(file=paste0(here::here(\"src\"),\"/data_header_reader.R\"))\n  source(file=paste0(here::here(\"src\"),\"/function_effect_posteriors.R\"))\n  source(file=paste0(here::here(\"src\"),\"/function_DIC.R\"))\n  \n  modelPath <-paste0(here::here(\"results\"),\"/\",run_ID,\"/\") # paste0(here::here(\"output\"),\"/\",run_year,\"/\",run_year,\"_\",run_month,\"/\",run_ID,\"/\")\n\n  resultsPath <- paste0(here::here(\"results\"),\"/figs & tables/\")\n  \n  N_burn <- 1 # The number of initial draws to remove from the MCMC chain\n  \n  \n  # MAKE SURE TO CHANGE THESE IF CHANGED IN ADMB FILES\n  PWS_ASA.dat <- data_reader(filename=paste0(basePath,\"PWS_ASA.dat\"))\n  nyr <- PWS_ASA.dat[[1]]\n  nyr_tobefit <- PWS_ASA.dat[[2]]\n  nage <- PWS_ASA.dat[[3]]\n  \n  covariates <- data_reader(filename=paste0(basePath,\"PWS_ASA(covariate).ctl\"))\n  n_age0_covs <- covariates[[2]]\n  n_mor_covs <- covariates[[7]]\n  \n  variable.names <- c(  'VHSV_age3_4_mort_93',\n                        'ICH_age5_8_mort_93',\n                        'Z_0_8',   \n                        'Z_9',\n                        'Z_0_8offset',\n                        'Z_9offset',\n                        'matur_age3_per1',\n                        'matur_age4_per1',\n                        'matur_age3_per2',\n                        'matur_age4_per2',\n                        'alpha_maturity_prespawn',\n                        'beta_maturity_prespawn',\n                        'alpha_v', \n                        'beta_v',\n                        'survey_vul_alpha',\n                        'survey_vul_beta',\n                        paste0('loginit_pop',1:5),\n                        'egg_add',\n                        'logmdm_c',\n                        'm_add',\n                        'hydADFG_q',\n                        'hydADFG_add',\n                        'hydPWSSC_q',\n                        'hydPWSSC_add',\n                        paste0('annual_age0devs',1:nyr_tobefit),\n                        'log_MeanAge0',\n                        'Mean_Age0offset',\n                        'sigma_age0devs',\n                        'beta_age0',\n                        'beta_mortality',\n                        paste0('annual_mortdevs',1:nyr_tobefit),\n                        'sigma_mortdevs',\n                        'beta_age0_offset',\n                        'beta_mortality_offset',\n                        'sigma_age0covar',\n                        'sigma_morcovar')\n  \n  #Below is a comprehensive list of all covariates/hypotheses I tested\n  \n  if(H_set==\"M\"){\n    hypothesis_names <- c(\"I. hoferi pre-2007 (Ages 5+)\",\n                          \"I. hoferi post-2007 (Ages 5+)\",\n                          \"VHSV (Ages 3-4)\",\n                          \"Summer upwelling (Ages 3+)\",\n                          \"Summer PDO (Ages 3+)\",\n                          \"Winter PDO (Ages 3+)\",\n                          'Summer NPGO (Ages 3+)',\n                          'Winter NPGO (Ages 3+)',\n                          'Total pink salmon returns (Ages 3+)',\n                          'GOA walleye pollock SSB (Ages 3+)',\n                          'GOA Pacific cod SB (Ages 3+)',\n                          'GOA Arrowtooth flounder female SB (Ages 3+)',\n                          'GOA Arrowtooth flounder total biomass (Ages 3+)',\n                          \"Summer humpback whale estimates (Age 3+)\",\n                          \"Humpback whale counts (Age 3+)\",\n                          \"Disease indices\",\n                          \"Disease\",\n                          \"Null\",\n                          \"Full\")\n    \n    hypothesis <- gsub(pattern=\" |-|/\",replacement=\"_\",x=hypothesis_names)\n    hypothesis <- gsub(pattern=\"[()']\",replacement=\"\",x=hypothesis)\n    \n    h.block <- c(1:14)\n    \n    H.within <- which(hypothesis %in% list.files(modelPath))\n    h.block[!((h.block) %in% H.within)] <- NA\n    hypothesis <- hypothesis[H.within]\n    hypothesis_names <- hypothesis_names[H.within]\n  }else if(H_set==\"R\"){\n    hypothesis_names <- c(\"1989 regime shift\",\n                          \"Hatchery-released juvenile pink salmon\",\n                          \"GOA walleye pollock age 1\",\n                          'Summer NPGO',\n                          'Summer PDO',\n                          'Age 0 scale growth (lagged 1 year)',\n                          'Freshwater discharge',\n                          \"PWS Avg. Zooplankton density '81-'99\",\n                          \"Full\")\n    hypothesis <- gsub(pattern=\" |-|/\",replacement=\"_\",x=hypothesis_names)\n    hypothesis <- gsub(pattern=\"[()']\",replacement=\"\",x=hypothesis)\n    h.block <- 1:8\n    H.within <- 1:8\n    \n    H.within <- which(hypothesis %in% list.files(modelPath))\n    h.block[!((h.block) %in% H.within)] <- NA\n    hypothesis <- hypothesis[H.within]\n    hypothesis_names <- hypothesis_names[H.within]\n  }\n  \n  \n  #####################################################################################\n  # COMPARING POSTERIORS ON EFFECTS OF COVARIATES\n  # Must loop through as I have to load in .csv files from MCMC results of ADMB model\n  # Edit this loop because this is pretty hard coded\n  \n  if(\"Estimated Effects\" %in% what.to.calculate){\n    function_effect_posteriors(hypothesis,\n                               modelPath,\n                               variable.names,\n                               N_burn,\n                               resultsPath,\n                               run_ID)\n  }\n  \n  #####################################################################################\n  # CALCULATE DIC\n  # Edit because iterations file cannot be used to directly write PIN file\n  if(\"DIC\" %in% what.to.calculate){\n    source(here::here(\"src/function_DIC.R\"))\n    targetdir <- paste0(resultsPath,\"DIC_calculations/\")\n    if(!dir.exists(targetdir)){\n      dir.create(paste0(resultsPath,\"DIC_calculations/\"))\n    }\n    \n    Model.DIC<- vector(length=length(hypothesis_names))\n    for(i in 1:length(hypothesis)){  \n      # Change to that working directory\n      setwd(paste0(modelPath,hypothesis[i]))\n      \n      # Copy the files that will remain unchanged to this new directory\n      filestocopy <- list.files(paste0(modelPath,hypothesis[i]))\n      file.copy(from=filestocopy, to=targetdir)\n      Model.DIC[i] <- function_DIC(targetdir,N_burn=1)\n      file.remove(list.files())\n    }\n    setwd(resultsPath)\n    unlink(paste0(resultsPath,\"DIC_calculations\"),recursive = TRUE,force=TRUE)\n  }\n  \n  #####################################################################################\n  # CALCULATE WAIC\n  if(\"WAIC\" %in% what.to.calculate){\n    WAIC <- function (log_lik,N_burn){\n      lppd <- sum (log (colMeans(exp(log_lik[-c(1:N_burn),])))) # Checked on 08/28/2018 - looks right with the Hooten and Hobbs equation\n      #p_waic_1 <- 2*sum (log(colMeans(exp(log_lik))) - colMeans(log_lik))\n      p_waic_2 <- sum (colVars(log_lik[-c(1:N_burn),]))\n      waic_2 <- -2*lppd + 2*p_waic_2\n      #return (list (waic=waic_2, p_waic=p_waic_2, lppd=lppd, p_waic_1=p_waic_1))\n      return (waic_2)\n    }\n    colVars <- function (a){\n      diff <- a - matrix (colMeans(a), nrow(a), ncol(a), byrow=TRUE)\n      vars <- colMeans (diff^2)*nrow(a)/(nrow(a)-1)\n      return (vars)\n    }\n    Model.WAIC.1 <- vector(length=length(hypothesis))\n    for(i in 1:length(hypothesis)){\n      # Change to that working directory\n      setwd(paste0(modelPath,hypothesis[i]))\n      llk.data <- read.csv(\"llik_observations.csv\",header=FALSE)\n      log_lik <- -llk.data[,colSums(llk.data)!=0][,-(1:8)] # Don't want first column because it is priors & penllk and convert from NLL to LL\n      Model.WAIC.1[i] <- WAIC(log_lik,N_burn)\n    }\n  }\n  \n  #####################################################################################\n  # CALCULATE WAIC and POSTERIOR PREDICTIVE LOSS\n  if(\"Predictive Loss\" %in% what.to.calculate){\n    \n    # source(file=paste0(here::here(\"src\"),\"/function_posterior_predictive_loss.R\"))\n    ptm <- proc.time()\n    Model.PPL <- matrix(nrow=length(hypothesis),ncol=54)\n    Model.WAIC.2 <- vector(length=length(hypothesis))\n    \n    library(doParallel)\n    n_cores <- 9\n    cl <- makeCluster(n_cores)\n    registerDoParallel(cl)\n    ptm <- proc.time()\n    \n    post.pred.output <- foreach(i=1:length(hypothesis)) %dopar%{\n      source(file=paste0(here::here(\"src\"),\"/function_PPL_WAIC.R\"))\n      #for(i in 1:length(hypothesis)){  \n      # Change to that working directory\n      setwd(paste0(modelPath,hypothesis[i]))\n      nburn=N_burn\n      #function_posterior_predictive_loss(nburn=nburn)\n      function_PPL_WAIC(nburn=nburn)\n    }\n    stopCluster(cl)\n    proc.time() - ptm\n    \n    \n    for(i in 1:length(hypothesis)){\n      if(i==1){\n        Model.PPL <- post.pred.output[[i]]$ppl\n        Model.fit <- data.frame(model=hypothesis_names[i],post.pred.output[[i]]$model.fits)\n        Model.WAIC.2 <- post.pred.output[[i]]$waic\n      }else{\n        Model.PPL <- rbind(Model.PPL,post.pred.output[[i]]$ppl)\n        Model.fit <- rbind(Model.fit,data.frame(model=hypothesis_names[i],post.pred.output[[i]]$model.fits))\n        Model.WAIC.2 <- rbind(Model.WAIC.2,post.pred.output[[i]]$waic)\n      }\n      \n    }\n    \n    final.names <- hypothesis_names\n    if(length(final.names)==1){\n      Model.PPL = t(as.matrix(Model.PPL))\n    }\n    model.selection <- data.frame(final.names,\n                                  Model.DIC[1:length(final.names)],\n                                  delta.Model.DIC=Model.DIC[1:length(final.names)]-min(Model.DIC[1:length(final.names)]),\n                                  Model.WAIC.1[1:length(final.names)],\n                                  delta.Model.WAIC.1=Model.WAIC.1[1:length(final.names)]-min(Model.WAIC.1[1:length(final.names)]),\n                                  Model.WAIC.2[1:length(final.names)],\n                                  delta.Model.WAIC.2=Model.WAIC.2[1:length(final.names)]-min(Model.WAIC.2[1:length(final.names)]),\n                                  Posterior.predict.loss=Model.PPL[1:length(final.names),1],\n                                  delta.posterior.predict.loss=Model.PPL[1:length(final.names),1]-min(Model.PPL[1:length(final.names),1]),\n                                  Error.loss.G=Model.PPL[1:length(final.names),2],\n                                  Predictive.variance.P=Model.PPL[1:length(final.names),3])\n    write.csv(model.selection,file=paste0(resultsPath,run_ID,\"_model selection results.csv\"))\n    \n    ppl.selection <- Model.PPL\n    colnames(ppl.selection) <- c('Dinf.squ.err','G.squ.err','P.squ.err',\n                                 'G.HYD_PWSSC.norm.squ.err','G.HYD_ADFG.norm.squ.err',\n                                 'G.EGG.norm.squ.err','G.MDM.norm.squ.err',\n                                 'G.SeAC.norm.squ.err','G.SpAC.norm.squ.err',\n                                 'P.HYD_PWSSC.norm.squ.err','P.HYD_ADFG.norm.squ.err',\n                                 'P.EGG.norm.squ.err','P.MDM.norm.squ.err',\n                                 'P.SeAC.norm.squ.err','P.SpAC.norm.squ.err',\n                                 'G.HYD_PWSSC.squ.err','G.HYD_ADFG.squ.err',\n                                 'G.EGG.squ.err','G.MDM.squ.err','G.SeAC.squ.err',\n                                 'G.SpAC.squ.err','P.HYD_PWSSC.squ.err',\n                                 'P.HYD_ADFG.squ.err','P.EGG.squ.err',\n                                 'P.MDM.squ.err','P.SeAC.squ.err','P.SpAC.squ.err')\n    \n    # colnames(ppl.selection) <- c('Dinf.squ.err','G.squ.err','P.squ.err',\n    #                              'G.HYD_PWSSC.norm.squ.err','G.HYD_ADFG.norm.squ.err',\n    #                              'G.EGG.norm.squ.err','G.MDM.norm.squ.err',\n    #                              'G.SeAC.norm.squ.err','G.SpAC.norm.squ.err',\n    #                              'P.HYD_PWSSC.norm.squ.err','P.HYD_ADFG.norm.squ.err',\n    #                              'P.EGG.norm.squ.err','P.MDM.norm.squ.err',\n    #                              'P.SeAC.norm.squ.err','P.SpAC.norm.squ.err',\n    #                              'G.HYD_PWSSC.squ.err','G.HYD_ADFG.squ.err',\n    #                              'G.EGG.squ.err','G.MDM.squ.err','G.SeAC.squ.err',\n    #                              'G.SpAC.squ.err','P.HYD_PWSSC.squ.err',\n    #                              'P.HYD_ADFG.squ.err','P.EGG.squ.err',\n    #                              'P.MDM.squ.err','P.SeAC.squ.err','P.SpAC.squ.err',\n    #                              'Dinf.abs.err','G.abs.err','P.abs.err',\n    #                              'G.HYD_PWSSC.norm.abs.err','G.HYD_ADFG.norm.abs.err',\n    #                              'G.EGG.norm.abs.err','G.MDM.norm.abs.err',\n    #                              'G.SeAC.norm.abs.err','G.SpAC.norm.abs.err',\n    #                              'P.HYD_PWSSC.norm.abs.err','P.HYD_ADFG.norm.abs.err',\n    #                              'P.EGG.norm.abs.err','P.MDM.norm.abs.err','P.SeAC.norm.abs.err',\n    #                              'P.SpAC.norm.abs.err','G.HYD_PWSSC.abs.err','G.HYD_ADFG.abs.err',\n    #                              'G.EGG.abs.err','G.MDM.abs.err','G.SeAC.abs.err','G.SpAC.abs.err',\n    #                              'P.HYD_PWSSC.abs.err','P.HYD_ADFG.abs.err','P.EGG.abs.err',\n    #                              'P.MDM.abs.err','P.SeAC.abs.err','P.SpAC.abs.err')\n    write.csv(ppl.selection,file=paste0(resultsPath,run_ID,\"_posterior predictive loss.csv\"))\n    \n    write.csv(Model.fit,file=paste0(resultsPath,run_ID,\"_model fits to data.csv\"))\n  }\n  \n  #####################################################################################\n  # CALCULATE PSIS LOO CV\n  if(\"PSIS LOO\" %in% what.to.calculate){\n    ptm <- proc.time()\n    library(doParallel)\n    n_cores <- 9\n    cl <- makeCluster(n_cores)\n    registerDoParallel(cl)\n    ptm <- proc.time()\n    \n    loo.output <- foreach(i=1:length(hypothesis)) %dopar%{\n      source(file=paste0(here::here(\"src\"),\"/function_PSIS_LOO.R\"))\n      # Change to that working directory\n      setwd(paste0(modelPath,hypothesis[i]))\n      function_PSIS_LOO(main_path=modelPath,mod_name=hypothesis[i])\n    }\n    stopCluster(cl)\n    proc.time() - ptm\n    \n    \n    Model.LOO <- matrix(nrow=length(hypothesis),ncol=5)\n    Model.LOO.pareto.k <- vector(length=length(hypothesis))\n    \n    for(i in 1:length(hypothesis)){\n      if(i==1){\n        Model.LOO <- loo.output[[i]]$psis_loo\n        Model.LOO.pareto.k <- data.frame(model=hypothesis_names[i],loo.output[[i]]$k_vals)\n      }else{\n        Model.LOO <- rbind(Model.LOO,loo.output[[i]]$psis_loo)\n        \n        if(nrow(loo.output[[i]]$k_vals)==0){\n          Model.LOO.pareto.k <- rbind( Model.LOO.pareto.k,\n                                       data.frame(model=hypothesis_names[i],bad_obs=NA,bad_k=NA))\n        }else{\n          Model.LOO.pareto.k <- rbind( Model.LOO.pareto.k,\n                                       data.frame(model=hypothesis_names[i],loo.output[[i]]$k_vals))\n        }\n        \n      }\n      \n    }\n    Model.LOO <- data.frame(final.names=hypothesis_names,Model.LOO)\n    write.csv(Model.LOO,file=paste0(resultsPath,run_ID,\"_PSIS LOO estimates.csv\"),row.names = FALSE)\n    write.csv(Model.LOO.pareto.k,file=paste0(resultsPath,run_ID,\"_PSIS LOO k diagnostics.csv\"),row.names = FALSE)\n  }\n  \n  }\n\nOS <- \"MAC\"\nrun_year = '2021'\nrun_month = '07'\n\nrun_ID <- \"2021_07_all fixed mortality effects\"\nwhat.to.calculate <- c(\"Estimated Effects\",\"DIC\",\"WAIC\",\"Predictive Loss\",\"PSIS LOO\")\nbasePath <- paste0(here::here(\"bin\"),\"/PWS_ASA_all fixed effects/\")\nH_set <- \"M\"\nptm = proc.time()\nmod_sel(what.to.calculate,run_ID,basePath,H_set,run_year,run_month)\nproc.time() - ptm\n\n\nrun_ID <- \"2021_07_all fixed mortality effects _ start from 1994\"\nbasePath <- paste0(here::here(\"bin\"),\"/PWS_ASA_all fixed effects/\")\nH_set <- \"M\"\nptm = proc.time()\nmod_sel(what.to.calculate,run_ID,basePath,H_set,run_year,run_month)\nproc.time() - ptm\n\n\nrun_ID <- \"2021_07_all fixed age0 effects\"\n#what.to.calculate <- c(\"Estimated Effects\",\"DIC\",\"WAIC\",\"Predictive Loss\")\nbasePath <- paste0(here::here(\"bin\"),\"/PWS_ASA_all fixed effects _ pen rec/\")\nH_set <- \"R\"\nptm = proc.time()\nmod_sel(what.to.calculate,run_ID,basePath,H_set,run_year,run_month)\nproc.time() - ptm\n\n\nrun_ID <- \"2021_07_all fixed age0 effects _ start from 1994\"\n#what.to.calculate <- c(\"Estimated Effects\",\"DIC\",\"WAIC\",\"Predictive Loss\")\nbasePath <- paste0(here::here(\"bin\"),\"/PWS_ASA_all fixed effects _ pen rec/\")\nH_set <- \"R\"\nptm = proc.time()\nmod_sel(what.to.calculate,run_ID,basePath,H_set,run_year,run_month)\nproc.time() - ptm\n\n\nrun_ID <- \"2021_07_latent mortality effects _ year specific SE\"\nwhat.to.calculate <- c(\"DIC\",\"WAIC\",\"Predictive Loss\",\"PSIS LOO\")\nbasePath <- paste0(here::here(\"bin\"),\"/PWS_ASA_latent vars for mortality _ year specific SE/\")\nH_set <- \"M\"\nptm = proc.time()\nmod_sel(what.to.calculate,run_ID,basePath,H_set,run_year,run_month)\nproc.time() - ptm\n\n\nrun_ID <- \"2021_07_latent age0 effects _ year specific SE\"\nwhat.to.calculate <- c(\"DIC\",\"WAIC\",\"Predictive Loss\",\"PSIS LOO\")\nbasePath <- paste0(here::here(\"bin\"),\"/PWS_ASA_latent vars for age0 _ year specific SE/\")\nH_set <- \"R\"\nptm = proc.time()\nmod_sel(what.to.calculate,run_ID,basePath,H_set,run_year,run_month)\nproc.time() - ptm\n\n\nrun_ID <- \"2021_07_all fixed age0 effects_low sigmaR\"\nrun_year = '2021'\nrun_month = '07'\nwhat.to.calculate <- c(\"Estimated Effects\",\"DIC\",\"WAIC\",\"Predictive Loss\",\"PSIS LOO\")\nbasePath <- paste0(here::here(\"bin\"),\"/PWS_ASA_all fixed effects _ pen rec_low sigmaR/\")\nH_set <- \"R\"\nptm = proc.time()\nmod_sel(what.to.calculate,run_ID,basePath,H_set,run_year,run_month)\nproc.time() - ptm\n",
    "created" : 1627504115785.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "143|35|163|2|\n167|36|189|2|\n292|40|334|2|\n",
    "hash" : "2600611550",
    "id" : "CFAE2B56",
    "lastKnownWriteTime" : 1627505832,
    "last_content_update" : 1627509476302,
    "path" : "~/Thesis/pwsher_baymodsel/src/calc_model_selection.R",
    "project_path" : "src/calc_model_selection.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}